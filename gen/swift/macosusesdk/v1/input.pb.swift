// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: macosusesdk/v1/input.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2025 MacosUseSDK
//
// Input resource definition

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A resource representing an input action that was or will be executed.
/// Inputs form a timeline for each application or globally for the desktop.
public struct Macosusesdk_V1_Input: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resource name. Either:
  /// - "applications/{application}/inputs/{input}" for app-specific inputs
  /// - "desktopInputs/{input}" for global desktop inputs
  public var name: String = String()

  /// The specific action to perform or that was performed.
  public var action: Macosusesdk_V1_InputAction {
    get {return _action ?? Macosusesdk_V1_InputAction()}
    set {_action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  public var hasAction: Bool {return self._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  public mutating func clearAction() {self._action = nil}

  /// Current state of the input.
  public var state: Macosusesdk_V1_Input.State = .unspecified

  /// When the input was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// When the input completed (success or failure).
  public var completeTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completeTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completeTime = newValue}
  }
  /// Returns true if `completeTime` has been explicitly set.
  public var hasCompleteTime: Bool {return self._completeTime != nil}
  /// Clears the value of `completeTime`. Subsequent reads from it will return its default value.
  public mutating func clearCompleteTime() {self._completeTime = nil}

  /// Error message if the input failed.
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// State of an input action.
  public enum State: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Default unspecified state.
    case unspecified // = 0

    /// Input is pending execution.
    case pending // = 1

    /// Input is currently executing.
    case executing // = 2

    /// Input completed successfully.
    case completed // = 3

    /// Input failed with an error.
    case failed // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pending
      case 2: self = .executing
      case 3: self = .completed
      case 4: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pending: return 1
      case .executing: return 2
      case .completed: return 3
      case .failed: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Macosusesdk_V1_Input.State] = [
      .unspecified,
      .pending,
      .executing,
      .completed,
      .failed,
    ]

  }

  public init() {}

  fileprivate var _action: Macosusesdk_V1_InputAction? = nil
  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _completeTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Specification of an input action.
public struct Macosusesdk_V1_InputAction: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether to show visual feedback during execution.
  public var showAnimation: Bool = false

  /// Duration of visual feedback in seconds.
  public var animationDuration: Double = 0

  /// The specific input type and parameters.
  public var inputType: Macosusesdk_V1_InputAction.OneOf_InputType? = nil

  /// Click at a specific point.
  public var click: Macosusesdk_Type_Point {
    get {
      if case .click(let v)? = inputType {return v}
      return Macosusesdk_Type_Point()
    }
    set {inputType = .click(newValue)}
  }

  /// Double-click at a specific point.
  public var doubleClick: Macosusesdk_Type_Point {
    get {
      if case .doubleClick(let v)? = inputType {return v}
      return Macosusesdk_Type_Point()
    }
    set {inputType = .doubleClick(newValue)}
  }

  /// Right-click at a specific point.
  public var rightClick: Macosusesdk_Type_Point {
    get {
      if case .rightClick(let v)? = inputType {return v}
      return Macosusesdk_Type_Point()
    }
    set {inputType = .rightClick(newValue)}
  }

  /// Type the specified text.
  public var typeText: String {
    get {
      if case .typeText(let v)? = inputType {return v}
      return String()
    }
    set {inputType = .typeText(newValue)}
  }

  /// Press a key combination.
  public var pressKey: Macosusesdk_V1_KeyPress {
    get {
      if case .pressKey(let v)? = inputType {return v}
      return Macosusesdk_V1_KeyPress()
    }
    set {inputType = .pressKey(newValue)}
  }

  /// Move mouse to a specific point.
  public var moveTo: Macosusesdk_Type_Point {
    get {
      if case .moveTo(let v)? = inputType {return v}
      return Macosusesdk_Type_Point()
    }
    set {inputType = .moveTo(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The specific input type and parameters.
  public enum OneOf_InputType: Equatable, Sendable {
    /// Click at a specific point.
    case click(Macosusesdk_Type_Point)
    /// Double-click at a specific point.
    case doubleClick(Macosusesdk_Type_Point)
    /// Right-click at a specific point.
    case rightClick(Macosusesdk_Type_Point)
    /// Type the specified text.
    case typeText(String)
    /// Press a key combination.
    case pressKey(Macosusesdk_V1_KeyPress)
    /// Move mouse to a specific point.
    case moveTo(Macosusesdk_Type_Point)

  }

  public init() {}
}

/// A key press with optional modifiers.
public struct Macosusesdk_V1_KeyPress: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key combination string (e.g., "return", "a", "cmd+c").
  public var keyCombo: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "macosusesdk.v1"

extension Macosusesdk_V1_Input: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Input"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}action\0\u{1}state\0\u{3}create_time\0\u{3}complete_time\0\u{1}error\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._action) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._completeTime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._action {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._completeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Macosusesdk_V1_Input, rhs: Macosusesdk_V1_Input) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._action != rhs._action {return false}
    if lhs.state != rhs.state {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._completeTime != rhs._completeTime {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Macosusesdk_V1_Input.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STATE_UNSPECIFIED\0\u{1}STATE_PENDING\0\u{1}STATE_EXECUTING\0\u{1}STATE_COMPLETED\0\u{1}STATE_FAILED\0")
}

extension Macosusesdk_V1_InputAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InputAction"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}show_animation\0\u{3}animation_duration\0\u{2}\u{8}click\0\u{3}double_click\0\u{3}right_click\0\u{3}type_text\0\u{3}press_key\0\u{3}move_to\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.showAnimation) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.animationDuration) }()
      case 10: try {
        var v: Macosusesdk_Type_Point?
        var hadOneofValue = false
        if let current = self.inputType {
          hadOneofValue = true
          if case .click(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.inputType = .click(v)
        }
      }()
      case 11: try {
        var v: Macosusesdk_Type_Point?
        var hadOneofValue = false
        if let current = self.inputType {
          hadOneofValue = true
          if case .doubleClick(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.inputType = .doubleClick(v)
        }
      }()
      case 12: try {
        var v: Macosusesdk_Type_Point?
        var hadOneofValue = false
        if let current = self.inputType {
          hadOneofValue = true
          if case .rightClick(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.inputType = .rightClick(v)
        }
      }()
      case 13: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.inputType != nil {try decoder.handleConflictingOneOf()}
          self.inputType = .typeText(v)
        }
      }()
      case 14: try {
        var v: Macosusesdk_V1_KeyPress?
        var hadOneofValue = false
        if let current = self.inputType {
          hadOneofValue = true
          if case .pressKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.inputType = .pressKey(v)
        }
      }()
      case 15: try {
        var v: Macosusesdk_Type_Point?
        var hadOneofValue = false
        if let current = self.inputType {
          hadOneofValue = true
          if case .moveTo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.inputType = .moveTo(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.showAnimation != false {
      try visitor.visitSingularBoolField(value: self.showAnimation, fieldNumber: 1)
    }
    if self.animationDuration.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.animationDuration, fieldNumber: 2)
    }
    switch self.inputType {
    case .click?: try {
      guard case .click(let v)? = self.inputType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .doubleClick?: try {
      guard case .doubleClick(let v)? = self.inputType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .rightClick?: try {
      guard case .rightClick(let v)? = self.inputType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .typeText?: try {
      guard case .typeText(let v)? = self.inputType else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }()
    case .pressKey?: try {
      guard case .pressKey(let v)? = self.inputType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .moveTo?: try {
      guard case .moveTo(let v)? = self.inputType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Macosusesdk_V1_InputAction, rhs: Macosusesdk_V1_InputAction) -> Bool {
    if lhs.showAnimation != rhs.showAnimation {return false}
    if lhs.animationDuration != rhs.animationDuration {return false}
    if lhs.inputType != rhs.inputType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Macosusesdk_V1_KeyPress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeyPress"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}key_combo\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyCombo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyCombo.isEmpty {
      try visitor.visitSingularStringField(value: self.keyCombo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Macosusesdk_V1_KeyPress, rhs: Macosusesdk_V1_KeyPress) -> Bool {
    if lhs.keyCombo != rhs.keyCombo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
