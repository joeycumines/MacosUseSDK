//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: macosusesdk/v1/macos_use.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// MacosUse is the primary service for automating macOS applications.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Macosusesdk_V1_MacosUseProvider: CallHandlerProvider {
  var interceptors: Macosusesdk_V1_MacosUseServerInterceptorFactoryProtocol? { get }

  /// Opens or activates an application. This is a long-running operation.
  func openApplication(request: Macosusesdk_V1_OpenApplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>

  /// Gets a specific application being tracked.
  func getApplication(request: Macosusesdk_V1_GetApplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Macosusesdk_V1_Application>

  /// Lists all applications currently tracked.
  func listApplications(request: Macosusesdk_V1_ListApplicationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Macosusesdk_V1_ListApplicationsResponse>

  /// Stops tracking an application. This does NOT quit the app.
  func deleteApplication(request: Macosusesdk_V1_DeleteApplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Creates an input action to be executed.
  func createInput(request: Macosusesdk_V1_CreateInputRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Macosusesdk_V1_Input>

  /// Gets a specific input.
  func getInput(request: Macosusesdk_V1_GetInputRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Macosusesdk_V1_Input>

  /// Lists inputs for an application or globally.
  func listInputs(request: Macosusesdk_V1_ListInputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Macosusesdk_V1_ListInputsResponse>

  /// Traverses the accessibility tree of an application.
  func traverseAccessibility(request: Macosusesdk_V1_TraverseAccessibilityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Macosusesdk_V1_TraverseAccessibilityResponse>

  /// Streams accessibility tree changes for an application.
  func watchAccessibility(request: Macosusesdk_V1_WatchAccessibilityRequest, context: StreamingResponseCallContext<Macosusesdk_V1_WatchAccessibilityResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Macosusesdk_V1_MacosUseProvider {
  public var serviceName: Substring {
    return Macosusesdk_V1_MacosUseServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "OpenApplication":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_OpenApplicationRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeOpenApplicationInterceptors() ?? [],
        userFunction: self.openApplication(request:context:)
      )

    case "GetApplication":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_GetApplicationRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_Application>(),
        interceptors: self.interceptors?.makeGetApplicationInterceptors() ?? [],
        userFunction: self.getApplication(request:context:)
      )

    case "ListApplications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_ListApplicationsRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_ListApplicationsResponse>(),
        interceptors: self.interceptors?.makeListApplicationsInterceptors() ?? [],
        userFunction: self.listApplications(request:context:)
      )

    case "DeleteApplication":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_DeleteApplicationRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteApplicationInterceptors() ?? [],
        userFunction: self.deleteApplication(request:context:)
      )

    case "CreateInput":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_CreateInputRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_Input>(),
        interceptors: self.interceptors?.makeCreateInputInterceptors() ?? [],
        userFunction: self.createInput(request:context:)
      )

    case "GetInput":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_GetInputRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_Input>(),
        interceptors: self.interceptors?.makeGetInputInterceptors() ?? [],
        userFunction: self.getInput(request:context:)
      )

    case "ListInputs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_ListInputsRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_ListInputsResponse>(),
        interceptors: self.interceptors?.makeListInputsInterceptors() ?? [],
        userFunction: self.listInputs(request:context:)
      )

    case "TraverseAccessibility":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_TraverseAccessibilityRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_TraverseAccessibilityResponse>(),
        interceptors: self.interceptors?.makeTraverseAccessibilityInterceptors() ?? [],
        userFunction: self.traverseAccessibility(request:context:)
      )

    case "WatchAccessibility":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_WatchAccessibilityRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_WatchAccessibilityResponse>(),
        interceptors: self.interceptors?.makeWatchAccessibilityInterceptors() ?? [],
        userFunction: self.watchAccessibility(request:context:)
      )

    default:
      return nil
    }
  }
}

/// MacosUse is the primary service for automating macOS applications.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Macosusesdk_V1_MacosUseAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Macosusesdk_V1_MacosUseServerInterceptorFactoryProtocol? { get }

  /// Opens or activates an application. This is a long-running operation.
  func openApplication(
    request: Macosusesdk_V1_OpenApplicationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Longrunning_Operation

  /// Gets a specific application being tracked.
  func getApplication(
    request: Macosusesdk_V1_GetApplicationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Macosusesdk_V1_Application

  /// Lists all applications currently tracked.
  func listApplications(
    request: Macosusesdk_V1_ListApplicationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Macosusesdk_V1_ListApplicationsResponse

  /// Stops tracking an application. This does NOT quit the app.
  func deleteApplication(
    request: Macosusesdk_V1_DeleteApplicationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Creates an input action to be executed.
  func createInput(
    request: Macosusesdk_V1_CreateInputRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Macosusesdk_V1_Input

  /// Gets a specific input.
  func getInput(
    request: Macosusesdk_V1_GetInputRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Macosusesdk_V1_Input

  /// Lists inputs for an application or globally.
  func listInputs(
    request: Macosusesdk_V1_ListInputsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Macosusesdk_V1_ListInputsResponse

  /// Traverses the accessibility tree of an application.
  func traverseAccessibility(
    request: Macosusesdk_V1_TraverseAccessibilityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Macosusesdk_V1_TraverseAccessibilityResponse

  /// Streams accessibility tree changes for an application.
  func watchAccessibility(
    request: Macosusesdk_V1_WatchAccessibilityRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Macosusesdk_V1_WatchAccessibilityResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Macosusesdk_V1_MacosUseAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Macosusesdk_V1_MacosUseServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Macosusesdk_V1_MacosUseServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Macosusesdk_V1_MacosUseServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "OpenApplication":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_OpenApplicationRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeOpenApplicationInterceptors() ?? [],
        wrapping: { try await self.openApplication(request: $0, context: $1) }
      )

    case "GetApplication":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_GetApplicationRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_Application>(),
        interceptors: self.interceptors?.makeGetApplicationInterceptors() ?? [],
        wrapping: { try await self.getApplication(request: $0, context: $1) }
      )

    case "ListApplications":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_ListApplicationsRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_ListApplicationsResponse>(),
        interceptors: self.interceptors?.makeListApplicationsInterceptors() ?? [],
        wrapping: { try await self.listApplications(request: $0, context: $1) }
      )

    case "DeleteApplication":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_DeleteApplicationRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteApplicationInterceptors() ?? [],
        wrapping: { try await self.deleteApplication(request: $0, context: $1) }
      )

    case "CreateInput":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_CreateInputRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_Input>(),
        interceptors: self.interceptors?.makeCreateInputInterceptors() ?? [],
        wrapping: { try await self.createInput(request: $0, context: $1) }
      )

    case "GetInput":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_GetInputRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_Input>(),
        interceptors: self.interceptors?.makeGetInputInterceptors() ?? [],
        wrapping: { try await self.getInput(request: $0, context: $1) }
      )

    case "ListInputs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_ListInputsRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_ListInputsResponse>(),
        interceptors: self.interceptors?.makeListInputsInterceptors() ?? [],
        wrapping: { try await self.listInputs(request: $0, context: $1) }
      )

    case "TraverseAccessibility":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_TraverseAccessibilityRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_TraverseAccessibilityResponse>(),
        interceptors: self.interceptors?.makeTraverseAccessibilityInterceptors() ?? [],
        wrapping: { try await self.traverseAccessibility(request: $0, context: $1) }
      )

    case "WatchAccessibility":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Macosusesdk_V1_WatchAccessibilityRequest>(),
        responseSerializer: ProtobufSerializer<Macosusesdk_V1_WatchAccessibilityResponse>(),
        interceptors: self.interceptors?.makeWatchAccessibilityInterceptors() ?? [],
        wrapping: { try await self.watchAccessibility(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol Macosusesdk_V1_MacosUseServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'openApplication'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOpenApplicationInterceptors() -> [ServerInterceptor<Macosusesdk_V1_OpenApplicationRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when handling 'getApplication'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetApplicationInterceptors() -> [ServerInterceptor<Macosusesdk_V1_GetApplicationRequest, Macosusesdk_V1_Application>]

  /// - Returns: Interceptors to use when handling 'listApplications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListApplicationsInterceptors() -> [ServerInterceptor<Macosusesdk_V1_ListApplicationsRequest, Macosusesdk_V1_ListApplicationsResponse>]

  /// - Returns: Interceptors to use when handling 'deleteApplication'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteApplicationInterceptors() -> [ServerInterceptor<Macosusesdk_V1_DeleteApplicationRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'createInput'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateInputInterceptors() -> [ServerInterceptor<Macosusesdk_V1_CreateInputRequest, Macosusesdk_V1_Input>]

  /// - Returns: Interceptors to use when handling 'getInput'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInputInterceptors() -> [ServerInterceptor<Macosusesdk_V1_GetInputRequest, Macosusesdk_V1_Input>]

  /// - Returns: Interceptors to use when handling 'listInputs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInputsInterceptors() -> [ServerInterceptor<Macosusesdk_V1_ListInputsRequest, Macosusesdk_V1_ListInputsResponse>]

  /// - Returns: Interceptors to use when handling 'traverseAccessibility'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraverseAccessibilityInterceptors() -> [ServerInterceptor<Macosusesdk_V1_TraverseAccessibilityRequest, Macosusesdk_V1_TraverseAccessibilityResponse>]

  /// - Returns: Interceptors to use when handling 'watchAccessibility'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWatchAccessibilityInterceptors() -> [ServerInterceptor<Macosusesdk_V1_WatchAccessibilityRequest, Macosusesdk_V1_WatchAccessibilityResponse>]
}

public enum Macosusesdk_V1_MacosUseServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MacosUse",
    fullName: "macosusesdk.v1.MacosUse",
    methods: [
      Macosusesdk_V1_MacosUseServerMetadata.Methods.openApplication,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.getApplication,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.listApplications,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.deleteApplication,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.createInput,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.getInput,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.listInputs,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.traverseAccessibility,
      Macosusesdk_V1_MacosUseServerMetadata.Methods.watchAccessibility,
    ]
  )

  public enum Methods {
    public static let openApplication = GRPCMethodDescriptor(
      name: "OpenApplication",
      path: "/macosusesdk.v1.MacosUse/OpenApplication",
      type: GRPCCallType.unary
    )

    public static let getApplication = GRPCMethodDescriptor(
      name: "GetApplication",
      path: "/macosusesdk.v1.MacosUse/GetApplication",
      type: GRPCCallType.unary
    )

    public static let listApplications = GRPCMethodDescriptor(
      name: "ListApplications",
      path: "/macosusesdk.v1.MacosUse/ListApplications",
      type: GRPCCallType.unary
    )

    public static let deleteApplication = GRPCMethodDescriptor(
      name: "DeleteApplication",
      path: "/macosusesdk.v1.MacosUse/DeleteApplication",
      type: GRPCCallType.unary
    )

    public static let createInput = GRPCMethodDescriptor(
      name: "CreateInput",
      path: "/macosusesdk.v1.MacosUse/CreateInput",
      type: GRPCCallType.unary
    )

    public static let getInput = GRPCMethodDescriptor(
      name: "GetInput",
      path: "/macosusesdk.v1.MacosUse/GetInput",
      type: GRPCCallType.unary
    )

    public static let listInputs = GRPCMethodDescriptor(
      name: "ListInputs",
      path: "/macosusesdk.v1.MacosUse/ListInputs",
      type: GRPCCallType.unary
    )

    public static let traverseAccessibility = GRPCMethodDescriptor(
      name: "TraverseAccessibility",
      path: "/macosusesdk.v1.MacosUse/TraverseAccessibility",
      type: GRPCCallType.unary
    )

    public static let watchAccessibility = GRPCMethodDescriptor(
      name: "WatchAccessibility",
      path: "/macosusesdk.v1.MacosUse/WatchAccessibility",
      type: GRPCCallType.serverStreaming
    )
  }
}
