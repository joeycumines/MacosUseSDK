// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: macosusesdk/type/element.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2025 MacosUseSDK
//
// Common UI element types

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a UI element from accessibility tree traversal.
public struct Macosusesdk_Type_Element: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The accessibility role of the element (e.g., "button", "text field").
  public var role: String = String()

  /// Text content of the element, if any.
  public var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  public var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  public mutating func clearText() {self._text = nil}

  /// X coordinate of the element's position.
  public var x: Double {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  public var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  public mutating func clearX() {self._x = nil}

  /// Y coordinate of the element's position.
  public var y: Double {
    get {return _y ?? 0}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  public var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  public mutating func clearY() {self._y = nil}

  /// Width of the element.
  public var width: Double {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  public var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  public mutating func clearWidth() {self._width = nil}

  /// Height of the element.
  public var height: Double {
    get {return _height ?? 0}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  public var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  public mutating func clearHeight() {self._height = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _text: String? = nil
  fileprivate var _x: Double? = nil
  fileprivate var _y: Double? = nil
  fileprivate var _width: Double? = nil
  fileprivate var _height: Double? = nil
}

/// Statistics about a traversal operation.
public struct Macosusesdk_Type_TraversalStatistics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Total number of elements found.
  public var count: Int32 = 0

  /// Number of elements excluded from results.
  public var excludedCount: Int32 = 0

  /// Number excluded due to not being interactable.
  public var excludedNonInteractable: Int32 = 0

  /// Number excluded due to having no text.
  public var excludedNoText: Int32 = 0

  /// Number of elements with text.
  public var withTextCount: Int32 = 0

  /// Number of elements without text.
  public var withoutTextCount: Int32 = 0

  /// Number of visible elements.
  public var visibleElementsCount: Int32 = 0

  /// Count of elements by role type.
  public var roleCounts: Dictionary<String,Int32> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "macosusesdk.type"

extension Macosusesdk_Type_Element: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Element"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}role\0\u{1}text\0\u{1}x\0\u{1}y\0\u{1}width\0\u{1}height\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.role) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._x) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._y) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._width) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.role.isEmpty {
      try visitor.visitSingularStringField(value: self.role, fieldNumber: 1)
    }
    try { if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._x {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._y {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._width {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._height {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Macosusesdk_Type_Element, rhs: Macosusesdk_Type_Element) -> Bool {
    if lhs.role != rhs.role {return false}
    if lhs._text != rhs._text {return false}
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Macosusesdk_Type_TraversalStatistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TraversalStatistics"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}count\0\u{3}excluded_count\0\u{3}excluded_non_interactable\0\u{3}excluded_no_text\0\u{3}with_text_count\0\u{3}without_text_count\0\u{3}visible_elements_count\0\u{3}role_counts\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.excludedCount) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.excludedNonInteractable) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.excludedNoText) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.withTextCount) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.withoutTextCount) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.visibleElementsCount) }()
      case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &self.roleCounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 1)
    }
    if self.excludedCount != 0 {
      try visitor.visitSingularInt32Field(value: self.excludedCount, fieldNumber: 2)
    }
    if self.excludedNonInteractable != 0 {
      try visitor.visitSingularInt32Field(value: self.excludedNonInteractable, fieldNumber: 3)
    }
    if self.excludedNoText != 0 {
      try visitor.visitSingularInt32Field(value: self.excludedNoText, fieldNumber: 4)
    }
    if self.withTextCount != 0 {
      try visitor.visitSingularInt32Field(value: self.withTextCount, fieldNumber: 5)
    }
    if self.withoutTextCount != 0 {
      try visitor.visitSingularInt32Field(value: self.withoutTextCount, fieldNumber: 6)
    }
    if self.visibleElementsCount != 0 {
      try visitor.visitSingularInt32Field(value: self.visibleElementsCount, fieldNumber: 7)
    }
    if !self.roleCounts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: self.roleCounts, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Macosusesdk_Type_TraversalStatistics, rhs: Macosusesdk_Type_TraversalStatistics) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.excludedCount != rhs.excludedCount {return false}
    if lhs.excludedNonInteractable != rhs.excludedNonInteractable {return false}
    if lhs.excludedNoText != rhs.excludedNoText {return false}
    if lhs.withTextCount != rhs.withTextCount {return false}
    if lhs.withoutTextCount != rhs.withoutTextCount {return false}
    if lhs.visibleElementsCount != rhs.visibleElementsCount {return false}
    if lhs.roleCounts != rhs.roleCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
