syntax = "proto3";

package macosusesdk.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";

// Service for managing and interacting with specific application targets.
service TargetApplicationsService {
  option (google.api.default_host) = "macos.googleapis.com";

  // Gets a specific application target being tracked by the server.
  rpc GetTargetApplication(GetTargetApplicationRequest) returns (TargetApplication) {
    option (google.api.http) = {
      get: "/v1/{name=targetApplications/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Lists all application targets currently tracked by the server.
  rpc ListTargetApplications(ListTargetApplicationsRequest) returns (ListTargetApplicationsResponse) {
    option (google.api.http) = {
      get: "/v1/targetApplications"
    };
  }

  // Removes an application target from server tracking. This does NOT quit the app.
  rpc DeleteTargetApplication(DeleteTargetApplicationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=targetApplications/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Performs a complex, coordinated action on a specific application target.
  // This is the primary method for all automation.
  rpc PerformAction(PerformActionRequest) returns (ActionResult) {
    option (google.api.http) = {
      post: "/v1/{name=targetApplications/*}:performAction"
      body: "*"
    };
    option (google.api.method_signature) = "name,action,options";
  }

  // Streams accessibility tree changes for a specific application target.
  // This is an extension of the SDK's diffing capability.
  rpc Watch(WatchRequest) returns (stream WatchResponse) {
    option (google.api.http) = {
      get: "/v1/{name=targetApplications/*}:watch"
    };
    option (google.api.method_signature) = "name";
  }
}

// A resource representing a running application instance (PID)
// that the server is actively tracking.
message TargetApplication {
  option (google.api.resource) = {
    type: "macos.googleapis.com/TargetApplication"
    pattern: "targetApplications/{pid}"
  };

  // Resource name. e.g., "targetApplications/12345"
  string name = 1;

  // The process ID.
  int32 pid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The localized name of the application.
  string app_name = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GetTargetApplicationRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "macos.googleapis.com/TargetApplication" }
  ];
}

message ListTargetApplicationsRequest {}

message ListTargetApplicationsResponse {
  repeated TargetApplication target_applications = 1;
}

message DeleteTargetApplicationRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "macos.googleapis.com/TargetApplication" }
  ];
}

// --- Action/Input Definitions (Mirrors SDK) ---

message Point {
  double x = 1;
  double y = 2;
}

// Mirrors SDK `InputAction`
message InputAction {
  oneof action_type {
    Point click = 1;
    Point double_click = 2;
    Point right_click = 3;
    string type_text = 4;
    KeyPress press_key = 5;
    Point move_to = 6;
  }
}

message KeyPress {
  // e.g., "return", "a", "cmd+c"
  string key_combo = 1;
}

// Mirrors SDK `PrimaryAction`
message PrimaryAction {
  oneof action_type {
    // .open is handled by DesktopService.OpenApplication
    InputAction input = 1;
    bool traverse_only = 2;
  }
}

// Mirrors SDK `ActionOptions`
message ActionOptions {
  bool traverse_before = 1;
  bool traverse_after = 2;
  bool show_diff = 3;
  bool only_visible_elements = 4;
  bool show_animation = 5;
  double animation_duration = 6;
  double delay_after_action = 7;
  // pidForTraversal is omitted; it's implicit from the resource name.
}

// Mirrors SDK `ActionResult`
message ActionResult {
  // AppOpenerResult is inlined.
  int32 pid = 1;
  string app_name = 2;

  int32 traversal_pid = 3;
  ResponseData traversal_before = 4;
  ResponseData traversal_after = 5;
  TraversalDiff traversal_diff = 6;
  string primary_action_error = 7;
  string traversal_before_error = 8;
  string traversal_after_error = 9;
}

// Mirrors SDK `ResponseData`
message ResponseData {
  string app_name = 1;
  repeated ElementData elements = 2;
  Statistics stats = 3;
  string processing_time_seconds = 4;
}

// Mirrors SDK `ElementData`
message ElementData {
  string role = 1;
  optional string text = 2;
  optional double x = 3;
  optional double y = 4;
  optional double width = 5;
  optional double height = 6;
}

// Mirrors SDK `Statistics`
message Statistics {
  int32 count = 1;
  int32 excluded_count = 2;
  int32 excluded_non_interactable = 3;
  int32 excluded_no_text = 4;
  int32 with_text_count = 5;
  int32 without_text_count = 6;
  int32 visible_elements_count = 7;
  map<string, int32> role_counts = 8;
}

// Mirrors SDK `TraversalDiff`
message TraversalDiff {
  repeated ElementData added = 1;
  repeated ElementData removed = 2;
  repeated ModifiedElement modified = 3;
}

// Mirrors SDK `ModifiedElement`
message ModifiedElement {
  ElementData before = 1;
  ElementData after = 2;
  repeated AttributeChangeDetail changes = 3;
}

// Mirrors SDK `AttributeChangeDetail`
message AttributeChangeDetail {
  string attribute_name = 1;
  optional string added_text = 2;
  optional string removed_text = 3;
  optional string old_value = 4;
  optional string new_value = 5;
}

// --- RPC Request/Response Messages ---

message PerformActionRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "macos.googleapis.com/TargetApplication" }
  ];
  PrimaryAction action = 2 [(google.api.field_behavior) = REQUIRED];
  ActionOptions options = 3;
}

message WatchRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "macos.googleapis.com/TargetApplication" }
  ];
  // e.g., poll interval
  double poll_interval_seconds = 2;
}

message WatchResponse {
  // Streams the diffs as they are detected.
  TraversalDiff diff = 1;
}
